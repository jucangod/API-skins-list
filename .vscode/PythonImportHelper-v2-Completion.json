[
    {
        "label": "MongoClient",
        "importPath": "pymongo.mongo_client",
        "description": "pymongo.mongo_client",
        "isExtraImport": true,
        "detail": "pymongo.mongo_client",
        "documentation": {}
    },
    {
        "label": "ServerApi",
        "importPath": "pymongo.server_api",
        "description": "pymongo.server_api",
        "isExtraImport": true,
        "detail": "pymongo.server_api",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "champions_collection",
        "importPath": "config.config",
        "description": "config.config",
        "isExtraImport": true,
        "detail": "config.config",
        "documentation": {}
    },
    {
        "label": "skins_collection",
        "importPath": "config.config",
        "description": "config.config",
        "isExtraImport": true,
        "detail": "config.config",
        "documentation": {}
    },
    {
        "label": "skins_collection",
        "importPath": "config.config",
        "description": "config.config",
        "isExtraImport": true,
        "detail": "config.config",
        "documentation": {}
    },
    {
        "label": "champions_collection",
        "importPath": "config.config",
        "description": "config.config",
        "isExtraImport": true,
        "detail": "config.config",
        "documentation": {}
    },
    {
        "label": "convertChampion",
        "importPath": "serializer.champions",
        "description": "serializer.champions",
        "isExtraImport": true,
        "detail": "serializer.champions",
        "documentation": {}
    },
    {
        "label": "convertChampions",
        "importPath": "serializer.champions",
        "description": "serializer.champions",
        "isExtraImport": true,
        "detail": "serializer.champions",
        "documentation": {}
    },
    {
        "label": "convertSkin",
        "importPath": "serializer.skins",
        "description": "serializer.skins",
        "isExtraImport": true,
        "detail": "serializer.skins",
        "documentation": {}
    },
    {
        "label": "convertSkins",
        "importPath": "serializer.skins",
        "description": "serializer.skins",
        "isExtraImport": true,
        "detail": "serializer.skins",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "champions",
        "importPath": "routers.champions",
        "description": "routers.champions",
        "isExtraImport": true,
        "detail": "routers.champions",
        "documentation": {}
    },
    {
        "label": "skins",
        "importPath": "routers.skins",
        "description": "routers.skins",
        "isExtraImport": true,
        "detail": "routers.skins",
        "documentation": {}
    },
    {
        "label": "uri",
        "kind": 5,
        "importPath": "config.config",
        "description": "config.config",
        "peekOfCode": "uri = \"mongodb+srv://jcespinozarodriguez:3sP0RtduIj7JM03G@skins-wish-list.dteyc.mongodb.net/?retryWrites=true&w=majority&appName=skins-wish-list\"\n# Create a new client and connect to the server\nclient = MongoClient(uri, server_api=ServerApi('1'))\ndb = client.skins_list\nchampions_collection = db['champions']\nskins_collection = db['skins']\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")",
        "detail": "config.config",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "config.config",
        "description": "config.config",
        "peekOfCode": "client = MongoClient(uri, server_api=ServerApi('1'))\ndb = client.skins_list\nchampions_collection = db['champions']\nskins_collection = db['skins']\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "config.config",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "config.config",
        "description": "config.config",
        "peekOfCode": "db = client.skins_list\nchampions_collection = db['champions']\nskins_collection = db['skins']\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "config.config",
        "documentation": {}
    },
    {
        "label": "champions_collection",
        "kind": 5,
        "importPath": "config.config",
        "description": "config.config",
        "peekOfCode": "champions_collection = db['champions']\nskins_collection = db['skins']\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "config.config",
        "documentation": {}
    },
    {
        "label": "skins_collection",
        "kind": 5,
        "importPath": "config.config",
        "description": "config.config",
        "peekOfCode": "skins_collection = db['skins']\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "config.config",
        "documentation": {}
    },
    {
        "label": "get_champions",
        "kind": 2,
        "importPath": "routers.champions",
        "description": "routers.champions",
        "peekOfCode": "def get_champions():\n    champions = champions_collection.find()\n    convertedChampions = convertChampions(champions)\n    return JSONResponse(content=jsonable_encoder(convertedChampions))",
        "detail": "routers.champions",
        "documentation": {}
    },
    {
        "label": "champions",
        "kind": 5,
        "importPath": "routers.champions",
        "description": "routers.champions",
        "peekOfCode": "champions = APIRouter()\n@champions.get('/champions')\ndef get_champions():\n    champions = champions_collection.find()\n    convertedChampions = convertChampions(champions)\n    return JSONResponse(content=jsonable_encoder(convertedChampions))",
        "detail": "routers.champions",
        "documentation": {}
    },
    {
        "label": "get_skins",
        "kind": 2,
        "importPath": "routers.skins",
        "description": "routers.skins",
        "peekOfCode": "def get_skins():\n    skins = skins_collection.find()\n    convertedSkins = convertSkins(skins)\n    return JSONResponse(content=jsonable_encoder(convertedSkins))\n#Obtener skins faltantes\n@skins.get('/skins/missing')\ndef get_missing_skins():\n    skins = skins_collection.find()\n    convertedSkins = convertSkins(skins)\n    return JSONResponse(content=jsonable_encoder(convertedSkins))",
        "detail": "routers.skins",
        "documentation": {}
    },
    {
        "label": "get_missing_skins",
        "kind": 2,
        "importPath": "routers.skins",
        "description": "routers.skins",
        "peekOfCode": "def get_missing_skins():\n    skins = skins_collection.find()\n    convertedSkins = convertSkins(skins)\n    return JSONResponse(content=jsonable_encoder(convertedSkins))\n#Obtener todas las skins en general\n@skins.get('/skins')\ndef get_skins():\n    skins = skins_collection.find()\n    convertedSkins = convertSkins(skins)\n    return JSONResponse(content=jsonable_encoder(convertedSkins))",
        "detail": "routers.skins",
        "documentation": {}
    },
    {
        "label": "get_skins",
        "kind": 2,
        "importPath": "routers.skins",
        "description": "routers.skins",
        "peekOfCode": "def get_skins():\n    skins = skins_collection.find()\n    convertedSkins = convertSkins(skins)\n    return JSONResponse(content=jsonable_encoder(convertedSkins))\n#Obtener todas las skins en general\n@skins.get('/skins')\ndef get_skins():\n    skins = skins_collection.find()\n    convertedSkins = convertSkins(skins)\n    return JSONResponse(content=jsonable_encoder(convertedSkins))",
        "detail": "routers.skins",
        "documentation": {}
    },
    {
        "label": "get_skins",
        "kind": 2,
        "importPath": "routers.skins",
        "description": "routers.skins",
        "peekOfCode": "def get_skins():\n    skins = skins_collection.find()\n    convertedSkins = convertSkins(skins)\n    return JSONResponse(content=jsonable_encoder(convertedSkins))",
        "detail": "routers.skins",
        "documentation": {}
    },
    {
        "label": "skins",
        "kind": 5,
        "importPath": "routers.skins",
        "description": "routers.skins",
        "peekOfCode": "skins = APIRouter()\n#Obtener todas las skins en general\n@skins.get('/skins')\ndef get_skins():\n    skins = skins_collection.find()\n    convertedSkins = convertSkins(skins)\n    return JSONResponse(content=jsonable_encoder(convertedSkins))\n#Obtener skins faltantes\n@skins.get('/skins/missing')\ndef get_missing_skins():",
        "detail": "routers.skins",
        "documentation": {}
    },
    {
        "label": "convertChampion",
        "kind": 2,
        "importPath": "serializer.champions",
        "description": "serializer.champions",
        "peekOfCode": "def convertChampion(champ) -> dict:\n    skin_names = [\n        skins_collection.find_one({\"_id\": ObjectId(skin_id)})[\"skin_name\"]\n        for skin_id in champ[\"skins\"]\n    ]\n    return {\n        \"id\": str(champ[\"_id\"]),\n        \"name\": champ[\"name\"],\n        \"skins\": skin_names\n    }",
        "detail": "serializer.champions",
        "documentation": {}
    },
    {
        "label": "convertChampions",
        "kind": 2,
        "importPath": "serializer.champions",
        "description": "serializer.champions",
        "peekOfCode": "def convertChampions(champs) -> list:\n    return [convertChampion(champ) for champ in champs]",
        "detail": "serializer.champions",
        "documentation": {}
    },
    {
        "label": "convertSkin",
        "kind": 2,
        "importPath": "serializer.skins",
        "description": "serializer.skins",
        "peekOfCode": "def convertSkin(skin) -> dict:\n    champion_id = skin[\"champion_id\"]\n    champion_name = champions_collection.find_one({\"_id\": ObjectId(champion_id)})[\"name\"]\n    return {\n        \"id\": str(skin[\"_id\"]),\n        \"skin_name\": skin[\"skin_name\"],\n        \"release_date\": skin[\"release_date\"],\n        \"isOwned\": skin[\"isOwned\"],\n        \"isWished\": skin[\"isWished\"],\n        \"url\": skin[\"url\"],",
        "detail": "serializer.skins",
        "documentation": {}
    },
    {
        "label": "convertSkins",
        "kind": 2,
        "importPath": "serializer.skins",
        "description": "serializer.skins",
        "peekOfCode": "def convertSkins(skins) -> list:\n    return [convertSkin(skin) for skin in skins]",
        "detail": "serializer.skins",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(champions)\napp.include_router(skins)",
        "detail": "main",
        "documentation": {}
    }
]